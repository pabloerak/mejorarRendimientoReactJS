{"version":3,"sources":["components/Title.js","components/Input.js","components/Forms/MyForm.js","components/Lists/MyList.js","App.js","reportWebVitals.js","index.js"],"names":["Title","children","console","log","memo","Control","styled","div","Label","label","MyInput","input","ErrorMessage","Input","props","useField","field","meta","touched","error","MyForm","onSubmit","initialValues","name","lastname","values","resetForm","validationSchema","Yup","required","type","Li","isEqual","MyList","data","map","x","App","useState","valores","setValores","handleSubmit","useCallback","iterador","time","useMemo","total","i","timeEnd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAEMA,EAAQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEf,OADAC,QAAQC,IAAI,mBAEV,6BACGF,KAQQG,iBAAKJ,G,4DCXdK,EAAUC,IAAOC,IAAV,oDAIPC,EAAQF,IAAOG,MAAV,sFAMLC,EAAUJ,IAAOK,MAAV,2JASPC,EAAeN,IAAOC,IAAV,4CAiBHM,EAbD,SAAC,GAAyB,IAAvBJ,EAAsB,EAAtBA,MAAUK,EAAY,iBACrC,EAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,eAACZ,EAAD,WACE,cAACG,EAAD,UAAQC,IACR,cAACC,EAAD,2BAAaM,GAAWF,IACvBG,EAAKC,SAAWD,EAAKE,MACpB,cAACP,EAAD,UAAeK,EAAKE,QAClB,SC7BJC,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChBnB,QAAQC,IAAI,wBAMZ,OACE,cAAC,IAAD,CACEmB,cAAe,CACbC,KAAM,GACNC,SAAU,IAEZH,SAXiB,SAACI,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BL,EAASI,GACTC,KAUEC,iBAAkBC,IAAW,CAC3BL,KAAMK,MAAaC,SAAS,eAC5BL,SAAUI,MAAaC,SAAS,iBARpC,SAWE,eAAC,IAAD,WACE,cAAC,EAAD,CAAON,KAAK,OAAOd,MAAM,WACzB,cAAC,EAAD,CAAOc,KAAK,WAAWd,MAAM,aAC7B,wBAAQqB,KAAK,SAAb,0BAMO1B,iBAAKgB,G,QCHdW,EAAK3B,gBAAK,YAAmB,IAAhBH,EAAe,EAAfA,SAEjB,OADAC,QAAQC,IAAR,uBAA4BF,IAE1B,6BACGA,MAGJ+B,WAEGC,EAAS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEhB,OADAhC,QAAQC,IAAI,sBAEV,6BACG+B,EAAKC,KAAI,SAAAC,GAAC,OACT,eAACL,EAAD,WACGK,EAAEb,KADL,IACYa,EAAEZ,WADLY,EAAEb,KAAOa,EAAEZ,gBAQbpB,iBAAK6B,GCZLI,MAnCf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAIMC,EAAeC,uBAAY,SAACjB,GAChCe,GAAW,SAAAN,GAAI,4BACVA,GADU,CAEbT,SAED,IAKGkB,EAAW,IAWjB,OAVAzC,QAAQ0C,KAAK,QACIC,mBAAQ,WAEvB,IADA,IAAIC,EAAQ,EACHC,EAAI,EAAGA,EAAIJ,EAAUI,IAC5BD,GAAgBH,EAElB,OAAOG,IACN,CAACH,IACJzC,QAAQ8C,QAAQ,QAGd,gCACE,cAAC,EAAD,2BACA,cAAC,EAAD,CAAQ3B,SAAUoB,IAClB,cAAC,EAAD,CAAQP,KAAMK,QCvBLU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.22cf8a9a.chunk.js","sourcesContent":["import { memo } from 'react'\n\nconst Title = ({ children }) => {\n  console.log('rendering title')\n  return (\n    <h1>\n      {children}\n    </h1>\n  )\n}\n\n//como solo se le pasa un String a este componente\n// en children, no hace falta aplicar la funcion\n// is Equal (ya que no recibe una array)\nexport default memo(Title)\n","import styled from 'styled-components'\nimport { useField } from 'formik'\n\nconst Control = styled.div`\n  margin-bottom: 20px;\n`\n\nconst Label = styled.label`\n  color: #000;\n  display: block;\n  margin-bottom: 5px;\n`\n\nconst MyInput = styled.input`\n  outline: none;\n  padding: 8px;\n  border: solid 1px #b1b3b5;\n  border-radius: 4px;\n  width: 100%;\n  margin-bottom: 5px;\n`\n\nconst ErrorMessage = styled.div`\n  color: #f00;\n`\n\nconst Input = ({ label, ...props }) => {\n  const [field, meta] = useField(props)\n  return (\n    <Control>\n      <Label>{label}</Label>\n      <MyInput {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <ErrorMessage>{meta.error}</ErrorMessage>\n      ) : null}\n    </Control>\n  )\n}\n\nexport default Input\n","import { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport Input from '../Input'\nimport { memo } from 'react'\n\nconst MyForm = ({ onSubmit }) => {\n  console.log('renderizando my form')\n  const handleSubmit = (values, { resetForm }) => {\n    onSubmit(values)\n    resetForm()\n  }\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        lastname: '',\n      }}\n      onSubmit={handleSubmit}\n      validationSchema={Yup.object({\n        name: Yup.string().required('Obligatorio'),\n        lastname: Yup.string().required('Obligatorio'),\n      })}\n    >\n      <Form>\n        <Input name=\"name\" label=\"Nombre\" />\n        <Input name=\"lastname\" label=\"Apellido\" />\n        <button type='submit'>Enviar</button>\n      </Form>\n    </Formik>\n  )\n}\n\nexport default memo(MyForm)\n","import { memo } from 'react'\nimport { isEqual } from 'lodash'\n\n//si recibe las mismas propiedades hacer que no se vulvan a renderizar las que ya estaban\n\n// const Li = memo(({ fullname }) => {\n//   console.log(`renderizando ${fullname}`)\n//   return (\n//     <li>\n//       {fullname}\n//     </li>\n//   )\n// })\n\n// const MyList = ({ data }) => {\n//   console.log('renderizando lista')\n//   return (\n//     <ul>\n//       {data.map(x =>\n//         <Li\n//           key={x.name + x.lastname}\n//           fullname={`${x.name} ${x.lastname}`}\n//         />\n//       )}\n//     </ul>\n//   )\n// }\n\n//AHORA CON LA PROPIEDAD DE CHILDREN\n\nconst Li = memo(({ children }) => {\n  console.log(`renderizando ${children}`)\n  return (\n    <li>\n      {children}\n    </li>\n  )\n}, isEqual)\n\nconst MyList = ({ data }) => {\n  console.log('renderizando lista')\n  return (\n    <ul>\n      {data.map(x =>\n        <Li key={x.name + x.lastname}>\n          {x.name} {x.lastname}\n        </Li>\n      )}\n    </ul>\n  )\n}\n\nexport default memo(MyList)\n","import { useState, useCallback, useMemo } from 'react'\nimport Title from './components/Title'\nimport MyForm from './components/Forms/MyForm'\nimport MyList from './components/Lists/MyList'\n\nfunction App() {\n  const [valores, setValores] = useState([])\n  //useCallback se utiliza para que si los valores no cambian,\n  // solo se haga una instancia de handleSubmit, \n  //si no se renderizaría este componente continuamente\n  const handleSubmit = useCallback((values) => {\n    setValores(data => ([ //data es lo mismo que valores, pero se cambia el nombre para que no haya conflictos\n      ...data,//esto son los valores\n      values\n    ]))\n  }, [])\n\n  //PARA FUNCIONES POTENCIALMENTE PESADAS UTILIZAR USEMEMO\n  //recibe como primer parametro la funcion en sí\n  //recibe como segundo argumento el valor que puede cambiar (dependencias)\n  const iterador = 50000000\n  console.time('memo')\n  const momoized = useMemo(() => {\n    let total = 0\n    for (let i = 0; i < iterador; i++){\n      total = total + iterador\n    }\n    return total\n  }, [iterador])\n  console.timeEnd('memo')\n\n  return (\n    <div>\n      <Title>Mi título</Title>\n      <MyForm onSubmit={handleSubmit} />\n      <MyList data={valores} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}